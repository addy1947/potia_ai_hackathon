Title: portia.plan
URL: https://docs.portialabs.ai/SDK/portia/plan
Words: 1283
============================================================

On this page
Plan primitives used to define and execute runs.
This module defines the core objects that represent the plan for executing a PlanRun.
Plan
class is the main structure that holds a series of steps (
Step
) to be executed by an
agent in response to a query. Each step can have inputs, an associated tool, and an output.
Variables can be used within steps to reference other parts of the plan or constants.
Classes in this file include:
Variable
: A variable used in the plan, referencing outputs of previous steps or constants.
Step
: Defines a single task that an agent will execute, including inputs and outputs.
ReadOnlyStep
: A read-only version of a
Step
used for passing steps to agents.
PlanContext
: Provides context about the plan, including the original query and available tools.
Plan
: Represents the entire series of steps required to execute a query.
These classes facilitate the definition of runs that can be dynamically adjusted based on the
tools, inputs, and outputs defined in the plan.
PlanBuilder Objects
class
PlanBuilder
A builder for creating plans.
This class provides an interface for constructing plans step by step. Requires a step to be
added to the plan before building it.
Example
plan = PlanBuilder()                 .step("Step 1", "tool_id_1", "output_1")                 .step("Step 2", "tool_id_2", "output_2")                 .input("input_1", "value_1")                 .build()
__init__
__init__
query
None
None
structured_output_schema
type
BaseModel
None
None
None
Initialize the builder with the plan query.
Arguments
query
- The original query given by the user.
structured_output_schema
type[BaseModel] | None
- The optional structured output schema
for the query.
step
step
task
tool_id
None
None
output
None
None
inputs
list
Variable
None
None
condition
None
None
structured_output_schema
type
BaseModel
None
None
PlanBuilder
Add a step to the plan.
Arguments
task
- The task to be completed by the step.
tool_id
str | None
- The ID of the tool used in this step, if applicable.
output
str | None
- The unique output ID for the result of this step.
inputs
list[Variable] | None
- The inputs to the step
condition
str | None
- A human readable condition which controls if the step should run
or not.
structured_output_schema
type[BaseModel] | None
- The optional structured output schema
for the step. Will override the tool output schema if provided by calling step
summarizer with structured response.
Returns
PlanBuilder
- The builder instance with the new step added.
input
input
name
description
None
None
step_index
None
None
PlanBuilder
Add an input variable to the chosen step in the plan (default is the last step).
Inputs are outputs from previous steps.
Arguments
name
- The name of the input.
description
str | None
- The description of the input.
step_index
int | None
- The index of the step to add the input to. If not provided,
the input will be added to the last step.
Returns
PlanBuilder
- The builder instance with the new input added.
plan_input
plan_input
name
description
PlanBuilder
Add an input variable to the plan.
Arguments
name
- The name of the input.
description
- The description of the input.
Returns
PlanBuilder
- The builder instance with the new plan input added.
condition
condition
condition
step_index
None
None
PlanBuilder
Add a condition to the chosen step in the plan (default is the last step).
Arguments
condition
- The condition to be added to the chosen step.
step_index
int | None
- The index of the step to add the condition to.
If not provided, the condition will be added to the last step.
Returns
PlanBuilder
- The builder instance with the new condition added.
build
build
Plan
Build the plan.
Returns
Plan
- The built plan.
Variable Objects
class
Variable
BaseModel
A reference to an output of a step.
Arguments
name
- The name of the output or plan input to reference, e.g. $best_offers.
description
- A description of the output or plan input.
pretty_print
pretty_print
Return the pretty print representation of the variable.
Returns
- A pretty print representation of the variable's name, and description.
PlanInput Objects
class
PlanInput
BaseModel
An input to a plan.
Arguments
name
- The name of the input, e.g. $api_key.
description
- A description of the input.
pretty_print
pretty_print
Return the pretty print representation of the plan input.
Returns
- A pretty print representation of the input's name, and description.
Step Objects
class
Step
BaseModel
A step in a PlanRun.
A step represents a task in the run to be executed. It contains inputs (variables) and
outputs, and may reference a tool to complete the task.
Arguments
task
- The task that needs to be completed by this step.
inputs
list[Variable]
- The input to the step, as a reference to an output of a previous
step or a plan input
tool_id
str | None
- The ID of the tool used in this step, if applicable.
output
- The unique output ID for the result of this step.
pretty_print
pretty_print
Return the pretty print representation of the step.
Returns
- A pretty print representation of the step's task, inputs, tool_id, and output.
ReadOnlyStep Objects
class
ReadOnlyStep
Step
A read-only copy of a step, passed to agents for reference.
This class creates an immutable representation of a step, which is used to ensure agents
do not modify the original plan during execution.
Arguments
step
Step
- A step object from which to create a read-only version.
from_step
@classmethod
from_step
step
Step
ReadOnlyStep
Create a read-only step from a normal step.
Arguments
step
Step
- The step to be converted to read-only.
Returns
ReadOnlyStep
- A new read-only step.
PlanContext Objects
class
PlanContext
BaseModel
Context for a plan.
The plan context contains information about the original query and the tools available
for the planning agent to use when generating the plan.
Arguments
query
- The original query given by the user.
tool_ids
list[str]
- A list of tool IDs available to the planning agent.
serialize_tool_ids
@field_serializer
"tool_ids"
serialize_tool_ids
tool_ids
list
list
Serialize the tool_ids to a sorted list.
Returns
list[str]
- The tool_ids as a sorted list.
Plan Objects
class
Plan
BaseModel
A plan represents a series of steps that an agent should follow to execute the query.
A plan defines the entire sequence of steps required to process a query and generate a result.
It also includes the context in which the plan was created.
Arguments
PlanUUID
- A unique ID for the plan.
plan_context
PlanContext
- The context for when the plan was created.
steps
list[Step]
- The set of steps that make up the plan.
inputs
list[PlanInput]
- The inputs required by the plan.
__str__
__str__
Return the string representation of the plan.
Returns
- A string representation of the plan's ID, context, and steps.
from_response
@classmethod
from_response
response_json
dict
Plan
Create a plan from a response.
Arguments
response_json
dict
- The response from the API.
Returns
Plan
- The plan.
pretty_print
pretty_print
Return the pretty print representation of the plan.
Returns
- A pretty print representation of the plan's ID, context, and steps.
validate_plan
@model_validator
mode
"after"
validate_plan
Self
Validate the plan.
Checks that all outputs + conditions are unique.
Returns
Plan
- The validated plan.
ReadOnlyPlan Objects
class
ReadOnlyPlan
Plan
A read-only copy of a plan, passed to agents for reference.
This class provides a non-modifiable view of a plan instance,
ensuring that agents can access plan details without altering them.
from_plan
@classmethod
from_plan
plan
Plan
ReadOnlyPlan
Create a read-only plan from a normal plan.
Arguments
plan
Plan
- The original plan instance to create a read-only copy from.
Returns
ReadOnlyPlan
- A new read-only instance of the provided plan.
PlanBuilder Objects
Variable Objects
PlanInput Objects
Step Objects
ReadOnlyStep Objects
PlanContext Objects
Plan Objects
ReadOnlyPlan Objects